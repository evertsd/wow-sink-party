{"version":3,"sources":["firebase/database.ts","util/color.ts","firebase/credentials.ts","firebase/character/schema.ts","firebase/base.ts","firebase/character/index.ts","firebase/party/schema.ts","firebase/party/index.ts","services/party.ts","scenes/PartiesList/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FirebaseErrorTypes","toString","_ref","_ref2","Object","slicedToArray","red","green","blue","alpha","arguments","length","undefined","concat","credentials","process","WoWClassType","Database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","characters","collection","parties","users","DatabaseFactory","now","auth","FieldValue","serverTimestamp","createSave","mapper","obj","opts","updates","assign","read","serialize","modifiedAt","createdAt","id","createLoad","customLoad","doc","model","data","deserialize","Mapper","createdBy","modifiedBy","objectWithoutProperties","userGUID","user","objectSpread","code","load","Base","save","set","asyncToGenerator","regenerator_default","a","mark","_callee","character","payload","wrap","_context","prev","next","t0","console","log","stop","_x","_x2","apply","this","get","_callee2","_context2","sent","abrupt","_x3","OriginalClassColors","_OriginalClassColors","defineProperty","warrior","paladin","hunter","rogue","priest","shaman","mage","warlock","druid","AccessibleClassColors","_objectSpread2","sortByLevel","b","level","experience","getClassColor","Color","klass","members","form","map","member","_ref3","party","Party","Promise","all","Character","PartiesList","state","_React$useState","React","_React$useState2","setState","PartyService","then","useDefaultParty","react","sort","info","className","name","i","key","style","color","App","react_default","createElement","PartiesList_PartiesList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cb7d8ba.chunk.js","sourcesContent":["/* Copyright (C) 2018 FacilitationLabs - All Rights Reserved\n\nPortions of this file Copyright (C) 2018 Daniel Eloff - All Rights Reserved\nLicensed to FacilitationLabs under the MIT open-source license. You may use, distribute\nand modify this code under the terms of the MIT license. You should have\nreceived a copy of the MIT license with this file, it can also be found here:\nhttps://opensource.org/licenses/MIT\n*/\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { credentials } from './credentials';\n\nexport enum FirebaseErrorTypes {\n  NOT_FOUND = 'NOT_FOUND',\n  UNEXPECTED_ERROR = 'UNEXPECTED_ERROR',\n}\n\nexport interface FirebaseError {\n  code: FirebaseErrorTypes;\n  message: string;\n}\n\nexport interface FirebaseQuery {\n  data?: firebase.firestore.QueryDocumentSnapshot[];\n  error?: FirebaseError;\n  loading?: boolean;\n}\n\nexport interface WithQuery {\n  query: FirebaseQuery;\n}\n\nexport interface FirebaseMutation {\n  data?: firebase.firestore.DocumentReference | firebase.firestore.DocumentReference[];\n  error?: FirebaseError;\n  loading?: boolean;\n}\n\nexport const defaultErrorHandler = (error: Error | FirebaseError) => {\n  if (Object.values(FirebaseErrorTypes).includes((error as FirebaseError).code)) {\n    return Promise.reject({ error });\n  }\n\n  return Promise.reject({ error: { code: FirebaseErrorTypes.UNEXPECTED_ERROR, message: error.message } });\n};\n\nexport const createQueryError = (message: string) =>\n  Promise.reject({ error: { code: FirebaseErrorTypes.UNEXPECTED_ERROR, message } });\n\nconst DatabaseFactory = () => {\n  firebase.initializeApp({\n    apiKey: credentials.KEY,\n    authDomain: credentials.DOMAIN,\n    databaseURL: credentials.URL,\n    projectId: credentials.ID,\n    storageBucket: credentials.BUCKET,\n    messagingSenderId: credentials.SENDER,\n  });\n\n  const db = firebase.firestore();\n\n  return {\n    db,\n    characters: db.collection('characters'),\n    parties: db.collection('parties'),\n    users: db.collection('users'),\n  };\n};\n\nexport const Database = DatabaseFactory();\n\nexport const auth = firebase.auth;\nexport const initAuth = auth;\n\nexport const now = () => firebase.firestore.FieldValue.serverTimestamp() as firebase.firestore.Timestamp;\n","export type Model = [number, number, number];\n\nexport const toString = ([red, green, blue]: Model, alpha: number = 1) =>\n  `rgba(${red}, ${green}, ${blue}, ${alpha})`\n","export interface ICredentials {\n  ID: string;\n  KEY_FILENAME: string;\n  KEY: string;\n  DOMAIN: string;\n  URL: string;\n  BUCKET: string;\n  SENDER: string;\n  GOOGLE_PROVIDER_ID: string;\n}\n\nexport const credentials = {\n  ID: process.env.REACT_APP_FIREBASE_ID,\n  KEY_FILENAME: process.env.REACT_APP_FIREBASE_KEY_FILENAME,\n  KEY: process.env.REACT_APP_FIREBASE_KEY,\n  DOMAIN: process.env.REACT_APP_FIREBASE_DOMAIN,\n  URL: process.env.REACT_APP_FIREBASE_URL,\n  BUCKET: process.env.REACT_APP_FIREBASE_BUCKET,\n  SENDER: process.env.REACT_APP_FIREBASE_SENDER,\n  GOOGLE_PROVIDER_ID: process.env.REACT_APP_FIREBASE_GOOGLE_PROVIDER_ID,\n} as ICredentials;\n","import * as Base from '../base';\n\nexport enum WoWClassType {\n  warrior = 'Warrior',\n  paladin = 'Paladin',\n  hunter = 'Hunter',\n  rogue = 'Rogue',\n  priest = 'Priest',\n  shaman = 'Shaman',\n  mage = 'Mage',\n  warlock = 'Warlock',\n  druid = 'Druid',\n}\n\nexport interface Attributes extends Base.Attributes {\n  achievementPoints: number;\n  klass: WoWClassType;\n  experience: number;\n  lastLoginTimestamp: number;\n  level: number;\n  name: string;\n}\n\nconst Mapper = Base.createAttributeMapper<Attributes>();\nexport const load = Base.createLoad(Mapper);\nexport const save = Base.createSave(Mapper);\n","import firebase from 'firebase/app';\nimport { Database, now } from './database';\n\nexport type GUID = string;\n\nexport interface Attributes {\n  id?: GUID;\n  createdAt?: firebase.firestore.Timestamp;\n  modifiedAt?: firebase.firestore.Timestamp;\n}\n\nexport interface GUIDs {\n  createdBy?: GUID;\n  modifiedBy?: GUID;\n}\n\nexport interface Refs {\n  createdBy?: firebase.firestore.DocumentReference;\n  modifiedBy?: firebase.firestore.DocumentReference;\n}\n\nexport interface Model extends Attributes, GUIDs {}\n\ninterface ModelFieldOpts {\n  user?: GUID;\n}\n\n// export type FirebaseSnapshot = firebase.firestore.DocumentSnapshot | firebase.firestore.QueryDocumentSnapshot;\nexport interface FirebaseSnapshot {\n  id: GUID;\n  data: () => any;\n}\n\nexport interface FirebaseMapper<A extends Attributes, G extends GUIDs, R extends Refs> {\n  read: (obj: A & (R | G)) => A;\n  deserialize: (obj: R) => G;\n  serialize: (obj: G, opts?: ModelFieldOpts) => R;\n}\n\nexport const createSave = <A extends Attributes, G extends GUIDs, R extends Refs>(\n  mapper: FirebaseMapper<A, G, R>,\n) => (obj: A & G, opts: ModelFieldOpts = {}): A & R => {\n  const updates = Object.assign(\n    mapper.read(obj),\n    mapper.serialize(obj, opts), {\n      modifiedAt: now(),\n      createdAt: obj.createdAt || now(),\n    },\n  );\n\n  delete updates.id;\n  return updates;\n};\n\nexport const createLoad = <A extends Attributes, G extends GUIDs, R extends Refs, M extends A & G>(\n  mapper: FirebaseMapper<A, G, R>, customLoad?: (doc: FirebaseSnapshot, model: A & G) => M,\n) => (doc: FirebaseSnapshot): M => {\n  const model = Object.assign(\n    { id: doc.id },\n    mapper.read(doc.data() as A & R),\n    mapper.deserialize(doc.data() as A & R),\n  );\n\n  return customLoad ? customLoad(doc, model) : model as M;\n};\n\nexport const Mapper: FirebaseMapper<Attributes, GUIDs, Refs> = {\n  read: ({ createdBy, modifiedBy, ...model }) => model,\n  deserialize: (model) => ({\n    createdBy: model.createdBy ? model.createdBy.id : undefined,\n    modifiedBy: model.modifiedBy ? model.modifiedBy.id : undefined,\n  }),\n  serialize: (model, opts = {}) => {\n    const userGUID = opts.user || model.createdBy;\n    const user = userGUID ? Database.users.doc(userGUID) : undefined;\n\n    return user ? { modifiedBy: user, createdBy: user } : {};\n  },\n};\n\nexport const createAttributeMapper = <T>(): FirebaseMapper<T, {}, {}> => ({\n  ...Mapper,\n  read: (code) => Mapper.read(code) as T,\n});\n","import { Color } from '../../util';\nimport { Attributes, WoWClassType, load, save } from './schema';\nimport { Database } from '../database';\n\nexport * from './schema';\n\nexport const set = async (id: number, character: Attributes) => {\n  const payload = save(character);\n\n  try {\n    await Database.characters.doc(`${id}`).set(payload);\n  } catch (e) {\n    console.log(`Character.set, error: ${e}`);\n  }\n};\n\nexport const get = async (id: string) => {\n  const doc = await Database.characters.doc(id).get();\n\n  return load(doc);\n}\n\ntype WoWClassColors = { [key in WoWClassType]: Color.Model; }\n\nexport const OriginalClassColors: WoWClassColors = {\n  [WoWClassType.warrior]: [199, 156, 110],\n  [WoWClassType.paladin]: [245, 140, 186],\n  [WoWClassType.hunter]: [171, 212, 115],\n  [WoWClassType.rogue]: [255, 245, 105],\n  [WoWClassType.priest]: [255, 255, 255],\n  [WoWClassType.shaman]: [0, 112, 222],\n  [WoWClassType.mage]: [64, 199, 235],\n  [WoWClassType.warlock]: [135, 135, 237],\n  [WoWClassType.druid]: [255, 125, 10],\n};\n\nexport const AccessibleClassColors: WoWClassColors = {\n  ...OriginalClassColors,\n  [WoWClassType.warrior]: [203, 164, 121],\n  [WoWClassType.shaman]: [95, 176, 255],\n  [WoWClassType.warlock]: [164, 164, 241],\n  [WoWClassType.druid]: [255, 142, 41],\n}\n\nexport const sortByLevel = (a: Attributes, b: Attributes) =>\n  b.level === a.level ?\n    b.experience - a.experience :\n    b.level - a.level;\n\nexport const getClassColor = (model: Attributes) => Color.toString(AccessibleClassColors[model.klass]);\n","import firebase from 'firebase/app';\nimport * as Base from '../base';\nimport { Database } from '../database';\n\nexport interface Attributes extends Base.Attributes {\n  name: string;\n  region: string;\n}\n\ninterface GUIDs extends Base.GUIDs {\n  members: Base.GUID[];\n}\n\ninterface Refs extends Base.Refs {\n  members: firebase.firestore.DocumentReference[];\n}\n\nexport interface Model extends GUIDs, Attributes {}\n\nconst Mapper: Base.FirebaseMapper<Attributes, GUIDs, Refs> = {\n  read: ({ members, ...form }) => Base.Mapper.read(form) as Attributes,\n  deserialize: ({ members, ...model }) => ({\n    ...Base.Mapper.deserialize(model),\n    members: members.map((member) => member.id),\n  }),\n  serialize: ({ members, ...model }, opts) => ({\n    ...(Base.Mapper.serialize(model, opts) as Refs),\n    members: members.map((member) => Database.characters.doc(member)),\n  }),\n};\n\nexport const load = Base.createLoad(Mapper);\nexport const save = Base.createSave(Mapper);\n","import { Model, load, save } from './schema';\nimport { Database } from '../database';\n\nexport * from './schema';\n\nexport const set = (id: string, party: Model) => {\n  const payload = save(party);\n\n  return Database.parties.doc(id).set(payload);\n};\n\nexport const get = async (id: string) => {\n  const doc = await Database.parties.doc(id).get();\n\n  return load(doc);\n}\n","import { Character, Party } from '../firebase';\n\nexport interface PartyNormalized {\n  party: Party.Model;\n  characters: Character.Attributes[];\n}\n\nexport const get = async (id: string): Promise<PartyNormalized> => {\n  const party = await Party.get(id);\n  const characters = await Promise.all(party.members.map(character =>\n    Character.get(character),\n  ));\n\n  return { party, characters };\n}\n","import * as React from 'react';\nimport { Character } from '~/firebase';\nimport { PartyService } from '~/services';\nimport './styles.css';\n\nconst useDefaultParty = () => {\n  const [state, setState] = React.useState<PartyService.PartyNormalized>();\n\n  React.useEffect(() => {\n    PartyService.get('61472496-4028-4fe3-ad91-4307ca1e0bbe')\n      .then(setState);\n  }, []);\n\n  return state;\n};\n\nexport const PartiesList = () => {\n  const state = useDefaultParty();\n\n  if (!state) {\n    return <p>Loading...</p>;\n  }\n\n  const characters = state.characters.sort(Character.sortByLevel);\n  console.info('characters', characters);\n  return (\n    <div className=\"parties-list\">\n      <h2>{state.party.name}</h2>\n      <ul>\n        {characters.map((character: Character.Attributes, i) => (\n          <li key={i} className=\"party-member\" style={{ color: Character.getClassColor(character) }}>\n            <div className=\"party-member-level\">\n              {character.level}\n            </div>\n            <div className=\"party-member-name\">\n              {character.name}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { PartiesList } from '~/scenes/PartiesList';\n\nconst App: React.FC = () => (\n  <PartiesList />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}